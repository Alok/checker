include src/tactics/Makefile.include

MLSRCFILES =					\
	src/positions.ml			\
	src/error.ml				\
	src/variables.ml			\
	src/expressions.ml			\
	src/judgments.ml \
	src/kinds.ml \
	src/signatures.ml \
	src/subordination.ml \
	src/relative.ml \
	src/contexts.ml \
	src/tactics.ml \
	src/typesystem.ml			\
	src/names.ml				\
	src/helpers.ml				\
	src/printer.ml				\
	src/hash.ml				\
	src/universe.ml				\
	src/alpha.ml src/alpha.mli		\
	src/substitute.ml			\
	src/tau.ml src/tau.mli			\
	src/errorcheck.ml			\
	src/lfcheck.ml				\
	src/toplevel.ml				\
	src/parse.ml src/parser.mly		\
	src/tokens.mll				\
	src/checker.ml				\
	$(TACTIC_FILES)

TAGS_FILES += $(MLSRCFILES)

CODE = byte
# A convenient way to select native code on the command line is:
#    make CODE=native
# A convenient way to select native code without changing the makefile or the command line is:
#    export MAKEFLAGS=" CODE=native "

CHECKER_EXE = checker.$(CODE)

ifeq ($(CODE),byte)
# -b indicates a backtrace should be printed for an uncaught exception:
CHECKER_ENV = OCAMLRUNPARAM=-b
endif
# add ,p to get the ocamlyacc parser to display a trace
# CHECKER_ENV += ,p

CHECKER_OPTIONS =

DEBUG = no
ifeq "$(DEBUG)" "yes"
CHECKER_OPTIONS += --debug
endif

CHECKER := $(CHECKER_ENV) time ./$(CHECKER_EXE) $(CHECKER_OPTIONS)

BFLAGS = -I src   -I src/tactics   -I +camlp5   -use-menhir   -menhir 'menhir --explain --error-recovery'

# this doesn't work because of a bug in ocamlbuild:

# add -yaccflag --trace to ocamlbuild command line to get the menhir parser to display a trace
# BFLAGS += -yaccflag --trace

# BFLAGS += -verbose 0

BASENAMES = $(shell for i in $(patsubst %.mli, %, $(patsubst %.mly, %, $(patsubst %.mll, %, $(patsubst %.ml, %, $(MLSRCFILES))))) ; do echo $$i ; done | uniq)


%.cmo: %.ml; ocamlbuild $(BFLAGS) $*.cmo
%.cmo: %.mll; ocamlbuild $(BFLAGS) $*.cmo
%.cmo: %.mly; ocamlbuild $(BFLAGS) $*.cmo
%.cmx: %.ml; ocamlbuild $(BFLAGS) $*.cmx
%.cmx: %.mll; ocamlbuild $(BFLAGS) $*.cmx
%.cmx: %.mly; ocamlbuild $(BFLAGS) $*.cmx

all: build
build: notify src/$(CHECKER_EXE)
notify:; @ echo "make: building $(CODE) code"

# note: building checker.native will build both *.cmo and *.cmx files (???)
src/checker.native src/checker.byte: always; ocamlbuild $(BFLAGS) $@
always:
clean: clean_src
clean_src:; ocamlbuild -clean

# all: doc
doc: checker.odocl $(MLSRCFILES)
	ocamlbuild $(BFLAGS) $(CHECKER_EXE) checker.docdir/index.html
checker.odocl: Makefile
	for i in $(BASENAMES) ; do echo $$i ; done >$@

clean: clean_doc
clean_doc:; rm -f TAGS checker.odocl .DS_Store

lc:; </dev/null wc -l $(MLSRCFILES)

debug:
	ocamlbuild $(BFLAGS) checker.byte 
	@ echo "enter:"
	@ echo "set arg test/demo.ts"
	@ echo "goto 10000"
	@ echo "break Error.trap"
	@ echo "run"
	ocamldebug -I _build/src -I _build/src/tactics checker.byte 

# Local Variables:
# compile-command: "make -C .. build "
# End:

