Syntax, existing and proposed:

New syntactic class:

      TS "judgment" expressions that represent LF types

      		[ T type ]
		[ o : T ]
		[ T = U ]
		[ o = o' : T ]

     introduced by the Rule or Axiom command with :: (instead of : ).

New operators for TS format:

    /		left associative		TS form for TS substitution, translated
    					    	to LF application. 

    |->		right associative		TS arrow form for TS lambda and LF form
                       				for LF lambda.  Unicode: ↦ or ⟼

    =>		right associative		TS arrow form for LF Pi types.
    						Translated to LF -> .  Unicode: ⇒

    |=>		right associative		TS arrow form for LF lambda.
    						Translated to LF |-> .  Unicode: ⟾

    :		non-associative			TS and LF form for something having a
    						type.  But types in TS are objects in
    						LF, whereas judgments of TS are types in LF.

    ::		non-associative			TS format for expressing a derivation
						of a judgment. Translated to LF colon

    |-		non-associative			TS format for introducing the local
    						context for a judgment.  Unicode: ⊢

    { ... |- ... } =>				TS form corresponding to two parameters
    						in an LF Pi type.

Examples:

    f t                     LF evaluation in LF form

    f[t/x]                  LF evaluation in traditional form, not a good notation,
    			    because x should be considered bound in f 

    f/t                     LF evaluation in TS form



    lambda x, b             the LF lambda in LF form

    x |-> b                 the LF lambda in LF form

    x |=> b                 the LF lambda in TS form



    [lambda;x](f,o,U)       the TS lambda, in full TS form

    [lambda](f,o,x|=>U)     the TS lambda, in full TS form, an alternative

    lambda x:T, o           the TS lambda, in abbreviated TS form

    (x:T) |-> o             the TS lambda, in abbreviated TS form, proposed as an
    			    alternative 

    ([lambda] f o (x|->U))  the TS lambda, in full LF form



    [ev;x](f, t, U)         TS evaluation in full TS form

    [ev](f, t, x |=> U)     TS evaluation in full TS form

    f t                     TS evaluation in abbreviated TS form

    ([ev] f t (x |-> U))    TS evaluation in LF form



    T -> U                  the TS function type in TS form

    Pi x:T, U               the TS Pi in TS form, abbreviated

    [Pi;x](T,U)             the TS Pi in TS full form, to be revised

    [Pi](T,x |=> U)         the TS Pi in TS full form, proposed

    ([Pi] T (x |-> U)       the TS Pi in LF form



    A -> B                  LF function type in LF form

    A => B                  LF function type in TS form

    (x:T) -> U              the LF Pi in LF form

    Pi x:T, U               the LF Pi in LF form



    { |- T Type } ...       TS form for the LF type (T:(T1:texp) × istype T1) ⟶  ...

    { |-  b:U } ...         TS form for the LF type

    				(b : ((b:oexp) × hastype b T₁) ⟶ ...

    { x:T |- U Type } ...   TS form notation for LF

    				(U : (U:oexp ⟶ texp) × 
				     ((x:oexp) ⟶ hastype x T₁ ⟶ istype (U x))) 
				 -> ... 
				 
				    and in ... U gets replaced by U₁

    { x:T |- b:U } ...      TS form notation for LF type

				( b : (b':oexp ⟶ oexp) × 
					((x:oexp) ⟶ hastype x T ⟶ hastype (b' x) U₁))
				-> ...

				and in ... b gets replaced by b₁

