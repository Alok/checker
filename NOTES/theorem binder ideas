Summary of next idea:

In pairs mode

     Axiom 3.4.21 pi { ⊢ T Type } { t : T ⊢ U Type } ⊢ [∏;t](T,U/t) Type.

gets translated to 

     (T:(T1:texp) × istype T1) ⟶ 
     (U:(U1:oexp ⟶ texp) × (t:oexp) ⟶ hastype t T₁ ⟶ istype (U1 t)) ⟶ 
     (t:Singleton(([∏] T₁ (t1 ⟼ (U₁ t1))) : texp)) × istype t

The next thing to try is something like

    (pi' : (T:texp) -> (U: oexp -> texp) -> Singleton(([∏] T U) : texp)) × 
	 (T: (T1:texp) × istype T1) ⟶ 
	 (U: (U1:oexp ⟶ texp) × (t:oexp) ⟶ hastype t T₁ ⟶ istype (U1 t)) ⟶ 
	 istype (pi' T_1 U_1)

Thus each theorem would return an expression and a typing judgment about it.
That way, it would be reasonable to impose premisses that do that same.

We may also want to reduce the number of arguments of U_2 like this:

    (pi' : (T:texp) -> (U: oexp -> texp) -> Singleton(([∏] T (t |-> (U t)) : texp)) × 
	 (T: (T1:texp) × istype T1) ⟶ 
	 (U:(U1:oexp ⟶ texp) × (t:oexp) × hastype t T₁ ⟶ istype (U1 t)) ⟶ 
	 istype (pi' T_1 U_1)

-----------------------------------------------------------------------------


I wrote this in the log to commit ce1c802e4977ce40fee140a92c633b39b8b96566:

>     Next goal:
>     
>         For a binder (in pairs mode) of the form
>     	       { t : T ⊢ U Type }
>         instead of
>     	       (U:(U1:oexp ⟶ texp) × (t:oexp) ⟶ hastype t T₁ ⟶ istype (U1 t)) ⟶
>         we want
>     	       (U: ((t:oexp) × hastype t T₁) ⟶ ((U':texp) × istype U')) ⟶
>         because none of our theorems give results usable as such premisses.

But that won't work, because we want to write an inference rule such as

           Axiom 3.4.21 pi { ⊢ T Type } { t : T ⊢ U Type } ⊢ [∏;t](T,U/t) Type .

In pairs mode that gets translated to 

     (T:(T1:texp) × istype T1) ⟶ 
     (U:(U1:oexp ⟶ texp) × (t:oexp) ⟶ hastype t T₁ ⟶ istype (U1 t)) ⟶ 
     (t:Singleton(([∏] T₁ (t1 ⟼ (U₁ t1))) : texp)) × istype t

and in relative mode it gets translated to

    (T:texp) ⟶ 
    (U:oexp ⟶ texp) ⟶ 
    (t:Singleton(([∏] T (t1 ⟼ (U t1))) : texp)) × 
	istype T ⟶ 
	((t1:oexp) ⟶ hastype t1 T ⟶ istype (U t1)) ⟶ 
	istype t

The proposal was to change the pairs-mode realization to 

     (T: (T1:texp) × istype T1) ⟶ 
     (U: ((t:oexp) × hastype t T₁) ⟶ ((U':texp) × istype U')) ⟶
     (t:Singleton(([∏] T₁ (t1 ⟼ ( ? ))) : texp)) × istype t

The thing we actually enter for U/t as the second branch of [∏;t] must be of
type texp when t is of type oexp for the result to be a well-typed texp.  We
can't enter (U t1)₁ because t1 is not a pair and U expects its argument to be a
pair.

The next thing to try (in pairs mode) is something like

    (pi' : (T:texp) -> (U: oexp -> texp) -> Singleton(([∏] T U) : texp)) × 
	 (T: (T1:texp) × istype T1) ⟶ 
	 (U: (U1:oexp ⟶ texp) × (t:oexp) ⟶ hastype t T₁ ⟶ istype (U1 t)) ⟶ 
	 istype (pi' T_1 U_1)

Thus each theorem would return an expression and a typing judgment about it.

We may also want to reduce the number of arguments of U_2 like this:

    (pi' : (T:texp) -> (U: oexp -> texp) -> Singleton(([∏] T U) : texp)) × 
	 (T: (T1:texp) × istype T1) ⟶ 
	 (U:(U1:oexp ⟶ texp) × (t:oexp) × hastype t T₁ ⟶ istype (U1 t)) ⟶ 
	 istype (pi' T_1 U_1)

and also in relative mode:

    (T:texp) ⟶ 
    (U:oexp ⟶ texp) ⟶ 
    (t:Singleton(([∏] T (t1 ⟼ (U t1))) : texp)) × 
	istype T ⟶ 
	((t1:oexp) × hastype t1 T ⟶ istype (U t1)) ⟶ 
	istype t

-----------------------------------------------------------------------------


-----------------------------------------------------------------------------

Problem 1:

	If the premise is { |- U Type } then that means

	U : (U:texp) × istype U)

	If the premise is { x:T |- U Type } then that means

	U : (U:oexp ⟶ texp) × ((x:oexp) ⟶ hastype x T₁ ⟶ istype (U x))

	We need a way to convert one like the first one to one like the second one.

	It's (pair (_ |-> U_1) (_ |-> _ |-> U_2)).  One way to do that is with
	auto-introduction.

Problem 2:

	If we have two premises { t:T |- u:U } { u:U |- V Type }, then we
	ought to be able to compose U with V to satisfy another premise of the
	form { x:T |- V Type }.  This means we have

	u : (u':oexp ⟶ oexp) × ((t:oexp) ⟶ hastype t T ⟶ hastype (u' t) U₁)

	V : (V:oexp ⟶ texp) × ((u:oexp) ⟶ hastype u U₁ ⟶ istype (V u))

	and we want

	VU : (VU:oexp ⟶ texp) × ((t:oexp) ⟶ hastype t T₁ ⟶ istype (VU t))

	There's a formula for that.

Solution: The judgment generated by our Theorem/Axiom syntax is wrong.  Hypotheses and
conclusions are sigma types, but the type represented by a theorem should not be
a function type between sigma types.  Instead, it should be a "compatible map"
between sigma types.

For example, instead of a function type

    	(T:texp) × istype T ⟶ (t:texp) × istype t

we want maps on pairs that are compatible with a map on first factors:

    	texp ⟶ texp

And there might be dependencies.

In general, we have a dependent product type

   	p' : (a : (a':A) × B) ⟶ ((c:C) × D)

that we want to be compatible with a dependent product type

   	p1 : (a:A) ⟶ C

So what we really want is a pair

   	p1 : (a:A) ⟶ C

	p2 : (a:A) ⟶ B ⟶ D

Typically 'a' is an expression, C is a judgment about it, 'p2 a' is the expression
provided by the proof of the theorem, and D is the judgment about it.

It would be nice for the judgment D to refer to c rather than to 'p1 a', since it's
about c, and we can save space by not substituting c in.

Wait, that's why we used singleton types, to provide the projection onto the first
component.  Can we use singleton types to get the compatibility?  As here:

   	p' : (a : (a':A) × B) ⟶ (c:Singleton(cc:C) × D)

Here cc is 'p1 a'.

-----------------------------------------------------------------------------

Idea: start with the system encoded in test4.ts.  To relate it to TS we re-define the
basics as follows, in terms of LF:

	type  ====>  (T:texp) * istype T

	obj_of_type   ====>   (t:oexp) * hastype t T

	type_equality   ====>   T ⟶ U ⟶ tequal T_1 U_1

	object_equality   ====>   T ⟶ t ⟶ t' ⟶ oequal t_1 t'_1 T_1

and we even redefine *all* of the arrows above by mapping them *not* to function types
between sigma types, but to "pi1-relative" function types between sigma types.  Thus
pi starts out with this type:

  	pi : (T : type) ⟶ (U : (t:obj_of_type T) ⟶ type) ⟶ type.

and is re-interpreted as this one (with ⟶ and * at the same parsing precedence and
right associative):

	pi : (T:texp) ⟶ (U : oexp ⟶ texp) ⟶

     	     (pi':texp) * 

	     istype T ⟶ ((t:oexp) ⟶ hastype t T ⟶ istype (U t)) ⟶ istype pi'.

We relate that to TS by defining

	    [Pi] := T ⟼ U ⟼ (pi T U CAR)

, i.e., [Pi] and pi' amount to the same thing.  So we could write

	pi : (T:texp) ⟶ (U : oexp ⟶ texp) ⟶

     	     (pi':Singleton(([Pi] T U):texp)) * 

	     istype T ⟶ ((t:oexp) ⟶ hastype t T ⟶ istype U t) ⟶ istype pi'.

How do we redefine application?
