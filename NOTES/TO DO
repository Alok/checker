
	THINGS THAT NEED DOING:

-----------------------------------------------------------------------------
Switch to de Bruijn indices for bound variables.  Advantage: fewer
substitutions of a variable by a fresh variable will be needed; comparison
of terms will be simpler.
-----------------------------------------------------------------------------
Implement ~-equivalence.
-----------------------------------------------------------------------------
Implement the rest of TTS, starting with witness checking.
-----------------------------------------------------------------------------
Implement "proof mode" and make it work with ProofGeneral. 
-----------------------------------------------------------------------------
Generate "derivation trees" from "witnessed expressions", as an experiment.
-----------------------------------------------------------------------------

	FURTHER IDEAS:

-----------------------------------------------------------------------------
The need for the cast when stating the axiom pr2_pair_reduction in intrinsic.ts
uncovers a misfeature in our LF encoding of TS, namely, a judgment "tequal T U"
should not be considered well-formed unless "istype T" and "istype U" are
established, and, similarly, a judgment "oequal x y T" should not be considered
well-formed unless we already know "istype T", "hastype x T", and "hastype y
T".  Experience shows we can't trust the one who codes the inference rules to
keep that in mind, so it should be checked by LF.  A corollary is that we
should insist that "hastype x T" is considered well-formed only in the presence
of "istype T".  Or not?  Insisting on such evidence will only make the proof
terms longer, so perhaps there is some other way to check that kind of thing,
for the convenience of those writing inference rules.

Anyway, if we wanted to do it, we'd redefine this

     istype : texp ⟶ judgment
     hastype : oexp ⟶ texp ⟶ judgment
     tequal : texp ⟶ texp ⟶ judgment
     oequal : oexp ⟶ oexp ⟶ texp ⟶ judgment

to this

     istype : texp ⟶ judgment
     hastype : (T:texp) ⟶ istype T ⟶ oexp ⟶ judgment
     tequal : (T:texp) ⟶ istype T ⟶ (U:texp) ⟶ istype U ⟶ judgment
and
     oequal : (T:texp) ⟶ istype T ⟶ (x:oexp) ⟶ hastype x T ⟶ (y:oexp) ⟶ hastype y T ⟶ judgment
or
     oequal : (T:texp) ⟶ (x:oexp) ⟶ hastype x T ⟶ (y:oexp) ⟶ hastype y T ⟶ judgment

-----------------------------------------------------------------------------

Notice that u-expressions are subordinate to t- and o- expressions, in the
sense that no inference rule or object constant that forms a u-expression
requires a t- or o- expression as a premise or argument.  This suggests that
"judged" names of types might need a projection operator to extract the ulevel
component. (?)

-----------------------------------------------------------------------------

The recent change, under which unused variables (with base name "_") don't
go onto the context during type checking, is a bit unsafe because it's not
uniformly implemented.  A tactic such as $assumption may proffer a reference
to such a variable, resulting in a lambda expression where the variable is
used, despite the name, and later examination of the body may not work out.

-----------------------------------------------------------------------------

should be able to write

       Definition LF UU := @[U].

instead of

       Definition LF UU : uexp ⟶ texp := @[U].

-----------------------------------------------------------------------------
Both
	
     cast : (T:(T1:texp) × istype T1) ⟶ 
     	    (U:(U1:texp) × istype U1) ⟶ 
	    (o:(o1:oexp) × hastype o1 T₁) ⟶ 
	    tequal T₁ U₁ ⟶ 
	    (x:Singleton(o₁ : oexp)) × hastype x U₁

and

     cast : (T:texp) ⟶ 
     	    (U:texp) ⟶ 
	    tequal T U ⟶ 
	    (o:oexp) ⟶ 
	    (x:Singleton(o : oexp)) × 
	    	istype T ⟶ istype U ⟶ hastype o T ⟶ hastype x U

are wrong, since neither provides an expression

Change to
	
     cast : (p : (T:texp) ⟶ (U:texp) ⟶ (o:oexp) ⟶ Singleton(o : oexp)) × 
	        (T:(T1:texp) × istype T1) ⟶ 
     	        (U:(U1:texp) × istype U1) ⟶ 
	    	(o:(o1:oexp) × hastype o1 T₁) ⟶ 
	    	tequal T₁ U₁ ⟶ 
 		(x:Singleton((p T₁ U₁ o₁)  : oexp)) × hastype x U₁

and

     cast : (T:texp) ⟶ 
     	    (U:texp) ⟶ 
	    (o:oexp) ⟶ 
	    (x:Singleton(o : oexp)) × 
	    	istype T ⟶ istype U ⟶ hastype o T ⟶ tequal T U ⟶ hastype x U
-----------------------------------------------------------------------------
Idea:

	introduce new syntax for binders by judgments: 

		Axiom 3.4.13 cast { ⊢ T U Type } [ T ≡ U ] { ⊢ o : T } ⊢ o : U.
