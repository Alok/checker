Abella

	http://abella.cs.umn.edu/

	Abella is an interactive theorem prover based on lambda-tree
	syntax. This means that Abella is well-suited for reasoning about the
	meta-theory of programming languages and other logical systems which
	manipulate objects with binding.

	http://www-users.cs.umn.edu/~agacek/pubs/gacek-thesis/gacek-thesis.pdf
	
	suggested by Bas

POPLmark Challenge

	http://www.seas.upenn.edu/~plclub/poplmark/

	The POPLmark Challenge is a concrete set of benchmarks intended both for
	measuring progress and for stimulating discussion and collaboration in
	mechanizing the metatheory of programming languages.

	suggested by Bas

Proof checkers to look at:

	Matita (modeled after coq)
	    http://matita.cs.unibo.it/
	    http://matita.cs.unibo.it/documentation.shtml
	    http://matita.cs.unibo.it/PAPERS/system_description2011.pdf
	    http://matita.cs.unibo.it/PAPERS/plmms09.pdf (A new type for tactics)
	    http://www.cs.unibo.it/~sacerdot/PAPERS/sadhana.pdf (a description of the kernel)

	Epigram
	    http://www.e-pig.org/epilogue/
	    http://en.wikipedia.org/wiki/Epigram_(programming_language)
	    implemented by Conor McBride and then continued by the Epigram group,
		    including Thorsten Altenkirch
	    http://code.google.com/p/epigram/

	    To download the source requires "darcs", but the Mac OS X binary for
	    it doesn't work, and the sources for it require haskell.

CoqMT

	Strub
	Coq modulo theory (pdf)
	http://link.springer.com/chapter/10.1007%2F978-3-642-15205-4_40?LI=true



LambdaPi

	recommended by Bas:

	http://strathprints.strath.ac.uk/36006/

	http://www.andres-loeh.de/LambdaPi/

	A Tutorial Implementation of a Dependently Typed Lambda Calculus

	Andres LÃ¶h, Conor McBride and Wouter Swierstra

	We present the type rules for a dependently-typed core calculus together with a
	straightforward implementation in Haskell. We explicitly highlight the changes
	necessary to shift from a simply-typed lambda calculus to the dependently-typed
	lambda calculus. We also describe how to extend our core language with data
	types and write several small example programs. The paper is accompanied by an
	executable interpreter and example code that allows immediate experimentation
	with the system we describe.

proper implementation of meta-variables

	recommended by Bas:

	Here is how it is done in agda:

	http://www.cse.chalmers.se/~ulfn/papers/meta-variables.pdf

type checking, unification, etc.:

       Ulf Norell's thesis (recommended by Dan L)
            http://www.cse.chalmers.se/~ulfn/#papers
	    http://www.cse.chalmers.se/~ulfn/papers/thesis.pdf


Inductive families need not store their indices
	  (recommended by Dan L)
 	  http://www.cs.st-andrews.ac.uk/~james/RESEARCH/indices.pdf
 	  Brady, McBride, McKinna


Idris, a General Purpose Dependently Typed Programming Language: Design and Implementation
	(recommended by Dan L)
	http://www.cs.st-andrews.ac.uk/~eb/drafts/impldtp.pdf
	Edwin Brady

Lumsdaine

	MODEL STRUCTURES FROM HIGHER INDUCTIVE TYPES
	PETER LEFANU LUMSDAINE

	Abstract. We show that for any dependent type theory with Martin-Lof
	identity types and mapping cylinders (dened as certain higher-dimensional
	inductive types), the category of contexts carries a pre-model-structure, i.e.
	a model structure minus the completeness conditions. The (trivial cobra-
	tions,brations) are the Gambino-Garner weak factorisation system of [GG08],
	while the weak equivalences are equivalences in the sense of Voevodsky [Voe].
	It follows that any categorical model of this type theory carries a pre-model-
	structure, and so, if it is additionally complete and co-complete, is a model
	category.
	
	http://www.mathstat.dal.ca/~p.l.lumsdaine/research/Lumsdaine-Model-strux-from-HITs.pdf

Universes

	this explains how universe constraints ought to work in module interfaces:

	Explicit Universes for the Calculus of Constructions
	by J Courant - 2002
	http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.12.2155
	https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CDUQFjAA&url=http%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.12.2155&ei=4SYpUYvzKue40gGY1YHwBg&usg=AFQjCNHFogPfdONrANubFPgxvTEnHpqryw&sig2=lZjlUclxhHGVSX8UsglFXg&bvm=bv.42768644,d.dmQ

Semisimplicial sets might be good enough:

	recommended by Bas:

	http://arxiv.org/abs/1210.0212
	http://arxiv.org/abs/0907.4553
	

Inductive definition of universes:

	recommended by Bas:

	http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.221.1318&rep=rep1&type=pdf
	http://www.cse.chalmers.se/~peterd/papers/inductive.html
	http://www.cse.chalmers.se/~peterd/papers/InductionRecursionInitialAlgebras.pdf

Fresh Ocaml:

      http://www.three-tuns.net/mark/papers/masses.pdf
      http://www.fresh-ocaml.org/      

Gonthier mentioned:

	 Mizar, for its natural language
	 Matita, for its literate documentation of its kernel, modeled after coq's

A language of patterns for subterm selection
  	Georges Gonthier and Enrico Tassi
	http://www.msr-inria.inria.fr/~gares/rew.pdf

Isabelle - Isar
	http://isabelle.in.tum.de/Isar/