TS

  see: A universe polymorphic type system, by Vladimir Voevodsky.

     universe levels		u-expressions
     types			t-expressions
     objects			o-expressions
     
  some expressions	uto	encoding as a syntax tree	explanation

     Pi x:A, B		t	[Pi;x](A,B)			A and B are t, x is bound in B
     lambda x:A, b	o	[lambda;x](A,b)			A is t, b is o, x is bound in b, has type Pi x:A, B if x:A |- b:B
     f z		o	[ev;x](f,z,B)			f z are o, B is t, x is bound in B, has type B[z/x]

  some judgments

       T type
       o : T
       T = T'
       o = o' : T

  some inference rules (total of 38)

 	  G |- o : T         G |- T = T'
 	--------------------------------- ("cast", rule 13 in the paper UPTS)
 		   G |- o : T'


	  G |- a:Empty     G |- T type     G |- T' type
	-------------------------------------------------  (eta for empty type)
			G |- T = T'


	G |- y : T			   G, x : T |- u : U
	---------------------------------------------------------- (beta reduction)
	G |- [ev;x]( [lambda;x](T,u) , y , U ) = u[y/x] : U[y/x]

  some definitions

	Definition foo1 : Pi (u1 ... : Ulevel), (T1 ... : Type), (o1:A1) ... , T.

	Definition foo2 : Pi (u1 ... : Ulevel), (T1 ... : Type), (o1:A1) ... , o : T.

  first ideas about encoding inference rules and derivations in syntax:

             cast :: Pi {G : MContext} {T T' : MType} {o : MObject},
		     Pi oT :: G |- o : T,
		     Pi TT' :: G |- T = T',
		     G |- o : T'.

        tetaempty :: Pi {G : MContext} (T T' : MType),
		     Pi j :: G |- a : Empty,
		     G |- T = T'.

  but beta reduction was annoying, because of the substitution

LF:

   embed TS in LF, an ambient type system, sharing contexts and variables

   	Phi : TS ---> LF

   LF syntax:

   				 c ::=  an object constant

   				 x ::=  an object variable

        object constants	 h ::=  c  |  x

	atomic objects		 R ::=  h M_1 ... M_n

	canonical objects	 M ::=  lambda x_0, ..., lambda x_m, h M_1 ... M_n

				 b ::=  a type family constant

        type families    	 T ::=  b M_1 ... M_n   |  Pi x: T, T'

   	kinds            	 K ::=  Pi x_1:T_1, ..., x_n:T_n, type

	type families may have kinds 	T : K

	some of them are types		T : type

	objects may have types		M : T

embedding TS in LF:

  Type family constants (judgments) with their kinds:

     uexp : type
     texp : type
     oexp : type
     istype : texp ⟶ type
     hastype : oexp ⟶ texp ⟶ type
     tequal : texp ⟶ texp ⟶ type
     oequal : oexp ⟶ oexp ⟶ texp ⟶ type

  Object constants (syntax of objects) with their types:

     [∏] : texp ⟶ (oexp ⟶ texp) ⟶ texp

     [ev] : oexp ⟶ oexp ⟶ (oexp ⟶ texp) ⟶ oexp

     [λ] : texp ⟶ (oexp ⟶ oexp) ⟶ oexp

Defining Phi:

     First, reorganize the definition of TS so the binding variables are
     associated with the the branches they bind.  Then insert lambdas, replace
     the labels by the corresponding constants, and apply them to their
     branches:

     	 [∏;x](A,B)		[∏](A, x |-> B)		([∏] A (lambda x, B))

	 [λ;x](A,b)		[λ](A, x |-> b)		([λ] A (lambda x, b))

	 [ev;x](f,z,B)		[ev](f,z,x |-> B)		([ev] f x (lambda x, B))

     Adequacy:    Phi(o) : oexp		iff		o is an o-expression
     		  Phi(t) : texp		iff		t is a t-expression
		  Phi(u) : uexp		iff		u is a u-expression

Send a TS context

    	..., x : T, ... |-

to

    	..., x : oexp, i : (hastype x Phi(T)), ... |-
	
(To handle such a pair is why I should add Sigma-types to the LF implementation.)

Interpret the judgments of TS as types of LF

    	|- T type			|- _ : istype Phi(T)

	|- o : T			|- _ : hastype Phi(o) Phi(T)

	|- T = T'			|- _ : tequal Phi(T) Phi(T')

	|- o = o' : T			|- _ : oequal Phi(o) Phi(o') Phi(T)

A verfication of a judgment (e.g., used as a premise in an inference rule) can
be added to the environment:

	..., j : istype Phi(T), ... |-

	..., j : hastype Phi(o) Phi(T), ... |-

	..., j : tequal Phi(T) Phi(T'), ... |-

	..., j : oequal Phi(o) Phi(o') Phi(T), ... |-

Definitions via singleton types ane subtyping (Harper and Stone) and LF type
checking

Tactics ...

Universe handling as a tactic admitted to the kernel

Plans for TS type checking

Demo ...
