TS

  see: A universe polymorphic type system, by Vladimir Voevodsky.

     universe levels		u-expressions
     types			t-expressions
     objects			o-expressions
     
  some expressions	uto	encoding as a syntax tree	explanation

     Pi x:A, B		t	[Pi;x](A,B)			A and B are t, x is bound in B
     lambda x:A, b	o	[lambda;x](A,b)			A is t, b is o, x is bound in b, has type Pi x:A, B if x:A |- b:B
     f z		o	[ev;x](f,z,B)			f z are o, B is t, x is bound in B, has type B[z/x]

  some judgments

       T type
       o : T
       T = T'
       o = o' : T

  some inference rules (total of 38)

 	  G |- o : T         G |- T = T'
 	--------------------------------- ("cast", rule 13 in the paper UPTS)
 		   G |- o : T'


	  G |- a:Empty     G |- T type     G |- T' type
	-------------------------------------------------  (eta for empty type)
			G |- T = T'


	G |- y : T			   G, x : T |- u : U
	---------------------------------------------------------- (beta reduction)
	G |- [ev;x]( [lambda;x](T,u) , y , U ) = u[y/x] : U[y/x]

  some definitions

	Definition foo1 : Pi (u1 ... : Ulevel), (T1 ... : Type), (o1:A1) ... , T.

	Definition foo2 : Pi (u1 ... : Ulevel), (T1 ... : Type), (o1:A1) ... , o : T.

  first ideas about encoding inference rules and derivations in syntax:

             cast :: Pi {G : MContext} {T T' : MType} {o : MObject},
		     Pi oT :: G |- o : T,
		     Pi TT' :: G |- T = T',
		     G |- o : T'.

        tetaempty :: Pi {G : MContext} (T T' : MType),
		     Pi j :: G |- a : Empty,
		     G |- T = T'.

  but beta reduction was annoying, because of the substitution

LF:

   embed TS in LF, an ambient type system, sharing contexts and variables

   	phi : TS ---> LF

   LF syntax:

	atomic objects		 R ::=  x M_1 ... M_n  |  c M_1 ... M_n

	canonical objects	 M ::=  R  |  lambda x, M

        type families    	 T ::=  b o_1 ... o_n   |  Pi x: T, T'

   	kinds            	 K ::=  Pi x_1:T_1, ..., x_n:T_n, type

	type families may have kinds 	T : K

	some of them are types		T : type

	objects may have types		M : T

embedding TS in LF:

  Type family constants with their kinds:

     uexp : type
     texp : type
     oexp : type
     istype : texp ⟶ type
     hastype : oexp ⟶ texp ⟶ type
     tequal : texp ⟶ texp ⟶ type
     oequal : oexp ⟶ oexp ⟶ texp ⟶ type

  Object constants with their types:

     [∏] : texp ⟶ (oexp ⟶ texp) ⟶ texp

     [ev] : oexp ⟶ oexp ⟶ (oexp ⟶ texp) ⟶ oexp

     [λ] : texp ⟶ (oexp ⟶ oexp) ⟶ oexp

Defining phi:

     First, reorganize the definition of TS so the binding variables are
     associated with the the branches they bind.  Then insert lambdas, replace
     the labels by the corresponding constants, and apply them to their
     branches:

     	 [∏;x](A,B)		[∏](A, x |-> B)		([∏] A (lambda x, B))

	 [λ;x](A,b)		[λ](A, x |-> b)		([λ] A (lambda x, b))

	 [ev;x](f,z,B)		[ev](f,z,x |-> B)		([ev] f x (lambda x, B))

     Adequacy:    phi(o) : oexp		iff		o is an o-expression
     		  phi(t) : texp		iff		t is a t-expression
		  phi(u) : uexp		iff		u is a u-expression

Send a TS context

    	..., x : T, ... |-

to

    	..., x : oexp, i : (hastype x phi(T)), ... |-
	
and send judgments

    	|- T type			|- _ : istype phi(T)

	|- o : T			|- _ : hastype phi(o) phi(T)

	|- T = T'			|- _ : tequal phi(T) phi(T')

	|- o = o' : T			|- _ : oequal phi(o) phi(o') phi(T)

